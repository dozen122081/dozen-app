"use client"
import React, { useEffect, useState } from 'react'
import { AreaChart } from '@mantine/charts';
import { useUser } from '@clerk/nextjs';
import { getIdFromWorkspaceUrl } from '@/lib/utils';
import { TUserTodo } from '../../todo/_components/WorkspaceTodoBoard';
export const data = [
    {
        date: 'Mar 22',
        Completed: 4,
    },
    {
        date: 'Mar 23',
        Completed: 17,
    },
    {
        date: 'Mar 24',
        Completed: 8,
    },
    {
        date: 'Mar 25',
        Completed: 18,
    },
    {
        date: 'Mar 26',
        Completed: 22,
    },
];
type TPersonalTomorrow = {
    id: string,
    title: string,
    author: string,
    createdAt: string,
    completed: boolean
}
const ProgressChart = () => {
    const { user } = useUser();
    const [userId, setUserId] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [workspaceId, setWorkspaceId] = useState<string | null>(null);
    const [totalTodays, setTotalTodays] = useState(0);
    const [incompleteTodays, setIncompleteTodays] = useState(0);
    const [totalTodos, setTotalTodos] = useState(0);
    const [incompleteTodos, setIncompleteTodos] = useState(0);
    const [totalCompleted, setTotalCompleted] = useState(0);
    const [totalIncomplete, setTotalIncomplete] = useState(0);
    useEffect(() => {
        setIsLoading(true)
        // **Warning:** Using window.location can be a security risk. Consider alternative approaches.
        const url = window.location.href;
        const extractedWorkspaceId = getIdFromWorkspaceUrl(url);
        setWorkspaceId(extractedWorkspaceId);
    }, [])
    useEffect(() => {
        const fetchUserId = async () => {
            const response = await fetch('/api/user');
            if (!response.ok) {
                throw new Error('Failed to fetch user data');
            }
            const data = await response.json();
            if (data && data.id) {
                setUserId(data.id.toString());
            } else {
                throw new Error("User data not found");
            }
        };

        if (!userId) {
            fetchUserId();
        }
    }, [user, userId, totalTodays, incompleteTodays]);
    useEffect(() => {
        const getTaskData = async () => {
            try {
                if (userId) {
                    const response = await fetch(`/api/workspace/today?workspaceId=${workspaceId}`);
                    if (!response.ok) {
                        throw new Error('Failed to fetch user data');
                    }
                    const data = await response.json();
                    const filteredTasks = data.filter((task: TPersonalTomorrow) => !task.completed);
                    setTotalTodays(data.length)
                    setIncompleteTodays(filteredTasks.length)

                }
            } catch (error) {
                console.error("Error fetching personal tomorrow data:", error);
            }
        };
        const getTodos = async () => {
            const response = await fetch(`/api/workspace/todo?workspaceId=${workspaceId}`);
            if (!response.ok) {
                throw new Error('Failed to fetch data');
            }
            const data = await response.json();
            const filteredTodos = data.filter((c: TUserTodo) => c.category === "todo");
            const filteredCompletedTodos = data.filter((c: TUserTodo) => c.category === "done");
            setTotalTodos(filteredTodos.length);
            setIncompleteTodos(filteredTodos.length - filteredCompletedTodos.length);
        }
        const getTotalValues = () => {
            // setTotalCompleted((totalTodos - incompleteTodos) + (totalTodays - incompleteTodays))
            setTotalCompleted((totalTodos - incompleteTodos))
            setTotalIncomplete((incompleteTodos) + (incompleteTodays))
        }
        if (userId) {
            getTaskData();
            getTodos();
            setIsLoading(false)
            getTotalValues()
        }
    }, [userId]);
    useEffect(() => {
        const getTotalValues = () => {
            setTotalCompleted((totalTodos - incompleteTodos) + (totalTodays - incompleteTodays))
            setTotalIncomplete((incompleteTodos) + (incompleteTodays))
        }
        if (userId) {
            getTotalValues()
        }
    }, [userId, totalTodays, totalTodos, incompleteTodos, incompleteTodays]);
    // TODO: handle database and api for progress tracking
    // We already have:
    console.log("TotalCompleted: ", totalCompleted)
    console.log("TotalIncomplete: ", totalIncomplete)
    return (
        <div className='w-full h-full flex flex-col gap-2 relative'>
            <div className='z-[999] backdrop-blur-md  p-3 absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2'>
                <h1>Under Development</h1>
            </div>
            <div>
                <h2 className='font-semibold'>Your Progress status</h2>
            </div>
            <AreaChart
                h={200}
                data={data}
                dataKey="date"
                series={[
                    { name: 'Completed', color: 'teal.6' },
                ]}
                curveType="monotone"
            />
        </div>
    )
}

export default ProgressChart